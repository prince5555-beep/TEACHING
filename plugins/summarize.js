const fs = require('fs');
const path = require('path');
const pdfParse = require('pdf-parse');
const { downloadContentFromMessage } = require('@whiskeysockets/baileys'); 

module.exports = {
    command: 'summary',
    description: 'Summarize uploaded PDF or text file',
    execute: async (socket, msg, args, number) => {
        const sender = msg.key.remoteJid;
        const quoted = msg.message?.extendedTextMessage?.contextInfo?.quotedMessage;
        const doc = quoted?.documentMessage;

        if (!doc) {
            return socket.sendMessage(sender, { text: 'üìÑ ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª PDF ‡∑Ñ‡∑ù .txt ‡∂ú‡∑ú‡∂±‡∑î‡∑Ä‡∂ö‡∑ä quote ‡∂ö‡∂ª‡∂Ω‡∑è `.summary` ‡∂ö‡∑í‡∂∫‡∂±‡∑ä‡∂±.' });
        }

        const mimeType = doc.mimetype;
        const fileName = doc.fileName || 'file';

        try {
            const stream = await downloadContentFromMessage(doc, 'document'); 
            let buffer = Buffer.from([]);

            for await (const chunk of stream) {
                buffer = Buffer.concat([buffer, chunk]);
            }

            let textContent = '';

            if (mimeType === 'application/pdf') {
                const data = await pdfParse(buffer);
                textContent = data.text;
            } else if (mimeType === 'text/plain') {
                textContent = buffer.toString('utf-8');
            } else {
                return socket.sendMessage(sender, { text: 'üö´ PDF ‡∑Ñ‡∑ù .txt file ‡∑Ä‡∂Ω‡∂ß ‡∂¥‡∂∏‡∂´‡∂ö‡∑ä support ‡∂ö‡∂ª‡∂±‡∑Ä‡∑è.' });
            }

            if (!textContent.trim()) {
                return socket.sendMessage(sender, { text: 'üòï ‡∂ú‡∑ú‡∂±‡∑î‡∑Ä‡∑ô ‡∂á‡∂≠‡∑î‡∂Ω‡∑ö text ‡∂≠‡∑í‡∂∫‡∑ô‡∂±‡∑ä‡∂±‡∑ö ‡∂±‡∑ê‡∑Ñ‡∑ê.' });
            }

            const summary = textContent.split(/\n+/).slice(0, 5).join('\n');

            const response = `üìù *Document Summary (Preview)*\n\n${summary.trim().substring(0, 1000)}\n\nüìå _This is a basic summary. Full NLP summarizer can be added later._`;

            await socket.sendMessage(sender, {
                text: response,
                contextInfo: {
                    forwardingScore: 999,
                    isForwarded: true
                }
            });

        } catch (error) {
            console.error('Summary plugin error:', error);
            return socket.sendMessage(sender, { text: '‚ùå ‡∂ú‡∑ú‡∂±‡∑î‡∑Ä download ‡∂ö‡∂ª‡∂±‡∑ä‡∂± ‡∂∂‡∑ê‡∂ª‡∑í‡∑Ä‡∑î‡∂±‡∑è. ‡∂±‡∑ê‡∑Ä‡∂≠ ‡∂ã‡∂≠‡∑ä‡∑É‡∑è‡∑Ñ ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.' });
        }
    }
};
