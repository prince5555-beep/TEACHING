const path = require("path");
const fs = require("fs");

module.exports = {
  command: "run",
  description: "Run temporary saved command",
  category: "owner",

  async execute(sock, msg, args = []) {
    const jid = msg.key.remoteJid;
    const codePath = path.join(__dirname, "../tempCode.js");

    // ‚úÖ validate input
    if (args.length === 0) {
      return sock.sendMessage(jid, {
        text: "‚ö†Ô∏è Run ‡∂ö‡∂ª‡∂±‡∑ä‡∂± ‡∂ï‡∂± command ‡∂ë‡∂ö specify ‡∂ö‡∂ª‡∂±‡∑ä‡∂±. (‡∂ã‡∂Ø‡∑è: `.run alive`)",
      });
    }

    const inputCommand = args[0].toLowerCase();

    // ‚úÖ check file exists
    if (!fs.existsSync(codePath)) {
      return sock.sendMessage(jid, {
        text: "‚ùå Temporary code ‡∂ë‡∂ö‡∂ö‡∑ä save ‡∂ö‡∂ª‡∂Ω‡∑è ‡∂±‡∑ê‡∑Ñ‡∑ê. `.codeadd` ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂Ø‡∑è‡∂±‡∑ä‡∂±.",
      });
    }

    try {
      // üßπ clear require cache
      delete require.cache[require.resolve(codePath)];

      const tempCommand = require(codePath);

      // ‚úÖ validate structure
      if (!tempCommand || typeof tempCommand !== "object") {
        return sock.sendMessage(jid, {
          text: "‚ùå Code ‡∂ë‡∂ö‡∑ô‡∂±‡∑ä valid command object ‡∂ë‡∂ö‡∂ö‡∑ä export ‡∑Ä‡∑ô‡∂Ω‡∑è ‡∂±‡∑ë.",
        });
      }

      // ‚úÖ check command match
      if (tempCommand.command !== inputCommand) {
        return sock.sendMessage(jid, {
          text: `‚ùå Code ‡∂ë‡∂ö "${inputCommand}" command ‡∂ë‡∂ö‡∂ß match ‡∑Ä‡∑ô‡∂±‡∑ä‡∂±‡∑ô ‡∂±‡∑ë. ‡∂î‡∂∫‡∑è‡∂Ω save ‡∂ö‡∂ª‡∂¥‡∑î ‡∂ë‡∂ö: "${tempCommand.command}"`,
        });
      }

      // ‚úÖ execute command
      if (typeof tempCommand.execute === "function") {
        await tempCommand.execute(sock, msg, args.slice(1));
      } else {
        return sock.sendMessage(jid, {
          text: "‚ùå `execute()` function ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂±‡∑ê‡∑Ñ‡∑ê. Valid command object ‡∂ë‡∂ö‡∂ö‡∑ä‡∂Ø ‡∂∂‡∂Ω‡∂±‡∑ä‡∂±.",
        });
      }

    } catch (err) {
      console.error("[RUN COMMAND ERROR]", err);
      return sock.sendMessage(jid, {
        text: `‚ùå Code ‡∂ë‡∂ö run ‡∂ö‡∂ª‡∂±‡∑ä‡∂± ‡∂ú‡∑í‡∂∫‡∂¥‡∑ú‡∂Ø‡∑î‡∑Ä‡∑ö error ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂Ü‡∑Ä‡∑è:\n\`\`\`${err.toString()}\`\`\``,
      });
    }
  }
};
